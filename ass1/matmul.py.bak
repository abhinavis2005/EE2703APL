def matrix_multiply(matrix1, matrix2):
    
    #initial dimensions of the matrix
    # matrix 1 has dimensions a x b and matrix 2 has c x d
    

    ret_matrix = []
    allowed_types = (int, float, complex)
    
    
    try:
        a = len(matrix1)
        b = len(matrix1[0])
        c = len(matrix2)
        d = len(matrix2[0])
        
        if len(matrix1) == 0 or len(matrix2) == 0:
            raise ValueError()
            
        if b != c :
            raise ValueError()

        
        for row_num , row in enumerate(matrix1):
            
            ret_row = []
            #sanity check
            if len(row) != b:
                raise ValueError()
            
            for j in range(d):
                sum = 0
                
                for i, num1 in enumerate(row):
                    num2 = matrix2[i][j]
                    if isinstance(num1, allowed_types) and isinstance(num2, allowed_types):
                        sum += num2*num1
                    else:
                        raise TypeError()
                ret_row.append(sum)
            if (len(ret_row)==d):
                ret_matrix.append(ret_row)
            else:
                raise ValueError()
    except TypeError:
        raise 
    except ValueError:
        raise
    except:
        raise ValueError()
        
    # if len(ret_matrix) == a:
    #     return ret_matrix
    # else:
    #     raise ValueError()
    return ret_matrix

    
    # raise NotImplementedError("Matrix multiplication function not implemented")




